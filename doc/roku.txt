*roku.txt* Tools for Roku app development

                  d8b                                   d8,                 ~
                  ?88                                  `8P                  ~
                   88b                                                      ~
  88bd88b d8888b   888  d88'?88   d8P        ?88   d8P  88b  88bd8b,d88b    ~
  88P'  `d8P' ?88  888bd8P' d88   88         d88  d8P'  88P  88P'`?8P'?8b   ~
 d88     88b  d88 d88888b   ?8(  d88   d8b   ?8b ,88'  d88  d88  d88  88P   ~
d88'     `?8888P'd88' `?88b,`?88P'?8b  ?8P   `?888P'  d88' d88' d88'  88b   ~

author: entrez <me@entrez.cc>

=============================================================================
CONTENTS                                               *roku.vim,roku-contents*

    1. usage ........................ |roku-usage|
    2. configuration ................ |roku-config|
    3. commands & mappings .......... |roku-commands|
    4. contributing ................. |roku-contrib|
    5. changelog .................... |roku-changelog|

=============================================================================
USAGE                                                              *roku-usage*

roku.vim provides functionality for development of Roku channels, both by
providing support for the Brightscript language (syntax highlighting, folding,
section movement, etc) and more general support for communicating with Roku
devices (installation, packaging).

=============================================================================
CONFIGURATION                                                     *roku-config*

the language support shouldn't require much configuration, but to enable the
various features related to communicating with your roku device support, a
number of variables may be and/or should be defined.

-----------------------------------------------------------------------------
g:roku_ip                                                           *g:roku_ip*

this can be set to the hostname or ip address of the device(s) to be used by
default, and is used when one of the |RokuInstall| or |RokuPackage| commands
is called without specifying a device. if not set, either command may still
be used by specifying any number of ips or hostnames as its only arguments -
see |RokuInstall| and |RokuPackage| for more detail.

to use a single device by default for installation & packaging, set g:roku_ip
like so:
    let g:roku_ip = '120.0.0.1'

to deploy to multiple devices by default instead:
    let g:roku_ip = ['120.0.0.1', '120.0.0.2', '120.0.0.3']

devices should be listed roughly in order of priority if g:roku_ip is set to
a list of hostnames/ips: commands which target only one device at a time,
like |RokuRemote|, will generally default to using the first value in the
list.

-----------------------------------------------------------------------------
g:roku_pkg_pass                                               *g:roku_pkg_pass*

this must be set to your device's packaging password to enable packaging your
channel from within vim.

-----------------------------------------------------------------------------
g:roku_username                                               *g:roku_username*

this must be set to the username used to log into the device (this is set to
`rokudev' by default during the initial configuration of your Roku device for
development).

-----------------------------------------------------------------------------
g:roku_password                                               *g:roku_password*

this must be set to the password used to log into the device over http; this
password is also set during initial configuration of your device as a dev
unit.

-----------------------------------------------------------------------------
g:roku_remove_old                                           *g:roku_remove_old*

if not set, or set to 1, |RokuPackage| will overwrite old .pkg files - if set
to 0, old .pkg files will be kept alongside the new ones.

-----------------------------------------------------------------------------
g:roku_indent_condcomp                                 *g:roku_indent_condcomp*

if set to 1, conditional compilation statements (#if/#else/#end if) will
trigger a change in indentation like the equivalent runtime if/else/end if
statements. this behavior is disabled by default.

-----------------------------------------------------------------------------
g:roku_increment_buildno                             *g:roku_increment_buildno*

if set to 1, the project's build number is incremented automatically whenever
it is deployed to a Roku device.

-----------------------------------------------------------------------------
g:roku_epoch_buildno                                     *g:roku_epoch_buildno*

if set to 1, the project's build number is set to the current UNIX epoch
whenever it is deployed to a Roku device.

-----------------------------------------------------------------------------
g:roku_remote_keys                                         *g:roku_remote_keys*

defines normal keymappings for triggering specific buttons with |RokuRemote|,
but in such a way that they're only applied in roku project files where this
plugin is active. compared to defining these mappings in a .vimrc file, for
example, this ensures mappings are never set for commands when they aren't
available & would cause an error.

the format used should be a dictionary where remote button names (see list:
|roku-keynames|) are associated with their desired mappings, e.g.:

        let g:roku_remote_keys = {
            \ 'home': '<m-home>',
            \ 'up': '<m-up>',
            \ 'down': '<m-down>',
            \ 'left': '<m-left>',
            \ 'right': '<m-right>',
            \ 'select': '<m-enter>',
        \ }

=============================================================================
COMMANDS & MAPPINGS                                             *roku-commands*

the typical section-based movement accessed via the ]], [[, [], and ][ key
mappings has been modified to move between function definitions when editing
a brightscript file - unless otherwise assigned, ]] and [[ move forward and
back, respectively, between the start of each function definition, while ][
and [] do the same between the ends of function declarations.

the command |RokuGoToDef| launches a basic search for an initial, explicit
definition/declaration of the symbol currently under the cursor.

additionally, roku.vim provides two commands for installation and packaging
your channel, as well as keybindings for using each one with your default
roku device (see |g:roku_ip|).

by default, |RokuInstall| is accessed with <leader>; and |RokuPackage| is
accessed with <leader>' - these mappings, again, will install and package
to/from the default device set in |g:roku_ip|, while the commands themselves
offer more flexibility & enable communicating with multiple devices.

-----------------------------------------------------------------------------
RokuGoToDef                                          *:RokuGoToDef* *RokuGoToDef*

usage: RokuGoToDef
default mapping: none

search for an explicit declaration/definition of the symbol under the cursor.
possible matches include function (or sub) definitions, uses of createObject,
declarations of the form let foo = bar, and field declarations which use the
addField("foo") function.

-----------------------------------------------------------------------------
RokuInstall                                          *:RokuInstall* *RokuInstall*

usage: RokuInstall [IP/HOSTNAME ...]
default mapping: <leader>;

install the current roku project/channel to the device(s) specified - if no
ip or hostname is included when calling the function, the value of |g:roku_ip|
is used by default.

-----------------------------------------------------------------------------
RokuPackage                                          *:RokuPackage* *RokuPackage*

usage: RokuPackage [IP/HOSTNAME ...]
default mapping: <leader>'

package the current sideloaded channel on the device in question - if called
from an identifiable roku project, the resulting .pkg file will be saved in
an out/ directory in the main project folder. otherwise, the .pkg file will
be saved in the current directory.

if |g:roku_remove_old| is set to 0, old .pkg files in the output directory
will be kept, and packages will be retrieved from all the specified devices;
otherwise, any existing package files will be overwritten/removed when the
new .pkg file is retrieved from the device, and only the first device named
will be used.

as with |RokuInstall|, if no ip or hostname is specified |g:roku_ip| will be
used by default.

-----------------------------------------------------------------------------
RokuMsg                                                      *:RokuMsg* *RokuMsg*

usage: RokuMsg <TEXT>
default mapping: none

send a string of text to the default device indicated by |g:roku_ip|, useful
for things like search input, etc.

-----------------------------------------------------------------------------
RokuRemote                                             *:RokuRemote* *RokuRemote*

usage: Remote <KEY>
default mapping: see |g:roku_remote_keys|

simulate a keypress on the default device indicated by |g:roku_ip| via roku's
ecp framework - this allows for direct interaction with your device without
leaving the editor.

                                                                *roku-keynames*
the device will respond only to certain valid key names, listed below. some
keys are non-standard - only supported by certain devices with advanced
functionality, e.g. roku tvs - and are marked with an asterisk (*):

key name                          description

home                              home button
rev                               rewind button
fwd                               fast-forward button
play                              play/pause button
select                            OK button
left                              left arrow
right                             right arrow
up                                up arrow
down                              down arrow
back                              back button
instantreplay                     instant replay/jump back button
info                              options/* button
backspace                         used in text input fields
search                            submit search query
enter                             submit input
findremote                        activate `find my remote' feature*
volumedown                        volume down button*
volumeup                          volume up button*
volumemute                        mute button*
poweroff                          turn off device*
channelup                         move up a channel (in tv tuner)*
channeldown                       move down a channel (in tv tuner)*
inputtuner                        switch to tv tuner*
inputhdmi1                        change input to to hdmi1*
inputhdmi2                        switch to hdmi2*
inputhdmi3                        switch to hdmi3*
inputhdmi4                        switch to hdmi4*
inputav1                          switch to av1*

=============================================================================
CONTRIBUTING                                                     *roku-contrib*

if you find a bug or would like to contribute code or ideas to roku.vim, feel
free to submit a PR, an issue, etc, at <https://github.com/entrez/roku.vim>.

=============================================================================
CHANGELOG                                                      *roku-changelog*

v0.9.10 - updates 'package' to be compatible with recent changes to the Roku
web interface, misc other minor fixes (2023-10-25)
v0.9.9 - adds `g:roku_epoch_buildno` (2023-09-25)
v0.9.8 - adds `g:roku_increment_buildno` and updates some other miscellaneous
vim settings (2020-07-13)
v0.9.7 - fixes issues with missing schema in curl commands, failure to skip
dummied-out entries in /etc/hosts, and some formatting quirks (2019-10-10)
v0.9.6 - fixes bug when running |RokuInstall| on file in cwd (2019-08-26)
v0.9.5 - adds multidevice support, as well as functionality related to device
communication like |RokuRemote|, |RokuMsg| (2019-08-06)
v0.9.4 - adds |g:roku_indent_condcomp| option & updates syntax/indentation
regex patterns (2019-08-02)
v0.9.3 - fixes a couple minor issues with filetype detection & syntax
highlighting (2019-07-31)
v0.9.2 - fixes a bug which caused the plugin to hang when creating a new brs
file in a non-existent directory (2019-07-18)
v0.9.1 - adds RokuGoToDef & refines some syntax highlighting (2019-07-18)
v0.9.0 - initial release (2019-07-08)
